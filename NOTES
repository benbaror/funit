Unit Testing Framework For Fortran
==================================

I need to write a new unit testing framework for Fortran because I need one that does not depend on special file names or endings, annoying locations for test files, unconfigurable compilation, etc.

How I want this to work:  Source code lives in ./, test code lives under test/ possibly with further directory structure underneath.  Test cases for XXX are in files named test_XXX.fun and use special syntax to designate tests, setup/teardown, dependencies, etc.  These will get rewritten to an equivalent fortran file with all the necessary changes to link into an executable test program.  A command line program funit will be responsible for running individual test cases or a whole directory worth of test cases.

Some tests may need fixtures which should live somewhere nice like test/fixtures/.  Not sure what the framework needs to do about that though.

Need to be able to configure how the build system works.  By default (and initially), use make to build the required .o files and the FC env var to build and link the test program.  Later have a config file to specify how this functions.

Tests need support modules.  Cannot write use statements in the test code due to syntactic issues.  Need to have "mod" keyword in addition to 'use'.  The difference is that "mod" will emit a "use module_name" in the appropriate place in the generated code whereas "dep" does not; "dep" just adds to the link objects.

Components:
 + test file parser
 + test library - not much to the library, mostly canned macro expansions in
   the code generator.
 - build system
 - test runner (funit command)
 - auto-runner(?)


Test Library & Running
----------------------

Progress needs to be reported in real time. Each success or failure should be reported as soon as the test routine exits or an assertion fails.  The failures need to be counted to be reported at the end, which reduces the fancy memory handling needed (good).  Time should be kept track of as well.

On test program exit, it should return the number of tests that failed.  This way the test runner (fu) can keep track of the total failures when running multiple suites.  Then fu keeps track of total run time and overall failure status.
